/*
  Copyright (c) 2015 Indian Institute of Science
  All rights reserved.

  Written and provided by:
  Ravi Teja Mullapudi, Vinay Vasista, Uday Bondhugula
  Dept of Computer Science and Automation
  Indian Institute of Science
  Bangalore 560012
  India

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

  3. Neither the name of the Indian Institute of Science nor the
  names of its contributors may be used to endorse or promote products
  derived from this software without specific prior written permission.

  THIS MATERIAL IS PROVIDED BY Ravi Teja Mullapudi, Vinay Vasista, and Uday
  Bondhugula, Indian Institute of Science ''AS IS'' AND ANY EXPRESS OR IMPLIED
  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
  EVENT SHALL Ravi Teja Mullapudi, Vinay Vasista, CSA Indian Institute of Science
  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <cmath>
#include <string.h>
#define isl_min(x,y) ((x) < (y) ? (x) : (y))
#define isl_max(x,y) ((x) > (y) ? (x) : (y))
#define isl_floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))
extern "C" void  pipeline_blend(long  C, long  R, void * img1_void_arg, void * img2_void_arg, void * mask_void_arg, void * blend_void_arg)
{
  float * img1;
  img1 = (float *) (img1_void_arg);
  float * img2;
  img2 = (float *) (img2_void_arg);
  float * mask;
  mask = (float *) (mask_void_arg);
  float * blend;
  blend = (float *) (blend_void_arg);
  float * Dy_1_img1;
  Dy_1_img1 = (float *) (malloc((sizeof(float ) * ((3 * ((((R / 2) - 2) - 1) + 1)) * ((((C / 2) - 2) - 1) + 1)))));
  float * Dy_1_img2;
  Dy_1_img2 = (float *) (malloc((sizeof(float ) * ((3 * ((((R / 2) - 2) - 1) + 1)) * ((((C / 2) - 2) - 1) + 1)))));
  float * Dy_1_mask;
  Dy_1_mask = (float *) (malloc((sizeof(float ) * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1)))));
  float * Dy_2_img1;
  Dy_2_img1 = (float *) (malloc((sizeof(float ) * ((3 * ((((R / 4) - 2) - 2) + 1)) * ((((C / 4) - 2) - 2) + 1)))));
  float * Dy_2_img2;
  Dy_2_img2 = (float *) (malloc((sizeof(float ) * ((3 * ((((R / 4) - 2) - 2) + 1)) * ((((C / 4) - 2) - 2) + 1)))));
  float * Col_2;
  Col_2 = (float *) (malloc((sizeof(float ) * ((3 * (((((R / 4) - 8) + 2) - 7) + 1)) * (((((C / 4) - 8) + 2) - 7) + 1)))));
  float * Col_1;
  Col_1 = (float *) (malloc((sizeof(float ) * ((3 * (((((R / 2) - 16) + 2) - 15) + 1)) * (((((C / 2) - 16) + 2) - 15) + 1)))));
  #pragma omp parallel for schedule(static)
  for (long  _T_i1 = 0; (_T_i1 <= 65); _T_i1 = (_T_i1 + 1))
  {
    float  Dx_1_img2[3][16][260];
    for (long  _T_i2 = -1; (_T_i2 <= 8); _T_i2 = (_T_i2 + 1))
    {
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19441 = ((1052 < ((16 * _T_i1) + 15))? 1052: ((16 * _T_i1) + 15));
        long  _ct19442 = ((1 > (16 * _T_i1))? 1: (16 * _T_i1));
        for (long  _i1 = _ct19442; (_i1 <= _ct19441); _i1 = (_i1 + 1))
        {
          long  _ct19443 = ((2106 < ((256 * _T_i2) + 259))? 2106: ((256 * _T_i2) + 259));
          long  _ct19444 = ((0 > (256 * _T_i2))? 0: (256 * _T_i2));
          #pragma ivdep
          for (long  _i2 = _ct19444; (_i2 <= _ct19443); _i2 = (_i2 + 1))
          {
            Dx_1_img2[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (((((img2[(((_i0 * (R * C)) + ((-2 + (2 * _i1)) * C)) + _i2)] + (4 * img2[(((_i0 * (R * C)) + ((-1 + (2 * _i1)) * C)) + _i2)])) + (6 * img2[(((_i0 * (R * C)) + ((2 * _i1) * C)) + _i2)])) + (4 * img2[(((_i0 * (R * C)) + ((1 + (2 * _i1)) * C)) + _i2)])) + img2[(((_i0 * (R * C)) + ((2 + (2 * _i1)) * C)) + _i2)]) * 0.0625f);
          }
        }
      }
      if ((_T_i2 >= 0))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          long  _ct19445 = ((1052 < ((16 * _T_i1) + 15))? 1052: ((16 * _T_i1) + 15));
          long  _ct19446 = ((1 > (16 * _T_i1))? 1: (16 * _T_i1));
          for (long  _i1 = _ct19446; (_i1 <= _ct19445); _i1 = (_i1 + 1))
          {
            long  _ct19447 = ((1052 < ((128 * _T_i2) + 128))? 1052: ((128 * _T_i2) + 128));
            #pragma ivdep
            for (long  _i2 = ((128 * _T_i2) + 1); (_i2 <= _ct19447); _i2 = (_i2 + 1))
            {
              Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((_i1 - 1) * ((((C / 2) - 2) - 1) + 1))) + (_i2 - 1))] = (((((Dx_1_img2[_i0][((-16 * _T_i1) + _i1)][(-2 + (2 * ((-128 * _T_i2) + _i2)))] + (4 * Dx_1_img2[_i0][((-16 * _T_i1) + _i1)][(-1 + (2 * ((-128 * _T_i2) + _i2)))])) + (6 * Dx_1_img2[_i0][((-16 * _T_i1) + _i1)][(2 * ((-128 * _T_i2) + _i2))])) + (4 * Dx_1_img2[_i0][((-16 * _T_i1) + _i1)][(1 + (2 * ((-128 * _T_i2) + _i2)))])) + Dx_1_img2[_i0][((-16 * _T_i1) + _i1)][(2 + (2 * ((-128 * _T_i2) + _i2)))]) * 0.0625f);
            }
          }
        }
      }
    }
  }
  #pragma omp parallel for schedule(static)
  for (long  _T_i1 = 0; (_T_i1 <= 65); _T_i1 = (_T_i1 + 1))
  {
    float  Dx_1_img1[3][16][260];
    for (long  _T_i2 = -1; (_T_i2 <= 8); _T_i2 = (_T_i2 + 1))
    {
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19448 = ((1052 < ((16 * _T_i1) + 15))? 1052: ((16 * _T_i1) + 15));
        long  _ct19449 = ((1 > (16 * _T_i1))? 1: (16 * _T_i1));
        for (long  _i1 = _ct19449; (_i1 <= _ct19448); _i1 = (_i1 + 1))
        {
          long  _ct19450 = ((2106 < ((256 * _T_i2) + 259))? 2106: ((256 * _T_i2) + 259));
          long  _ct19451 = ((0 > (256 * _T_i2))? 0: (256 * _T_i2));
          #pragma ivdep
          for (long  _i2 = _ct19451; (_i2 <= _ct19450); _i2 = (_i2 + 1))
          {
            Dx_1_img1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (((((img1[(((_i0 * (R * C)) + ((-2 + (2 * _i1)) * C)) + _i2)] + (4 * img1[(((_i0 * (R * C)) + ((-1 + (2 * _i1)) * C)) + _i2)])) + (6 * img1[(((_i0 * (R * C)) + ((2 * _i1) * C)) + _i2)])) + (4 * img1[(((_i0 * (R * C)) + ((1 + (2 * _i1)) * C)) + _i2)])) + img1[(((_i0 * (R * C)) + ((2 + (2 * _i1)) * C)) + _i2)]) * 0.0625f);
          }
        }
      }
      if ((_T_i2 >= 0))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          long  _ct19452 = ((1052 < ((16 * _T_i1) + 15))? 1052: ((16 * _T_i1) + 15));
          long  _ct19453 = ((1 > (16 * _T_i1))? 1: (16 * _T_i1));
          for (long  _i1 = _ct19453; (_i1 <= _ct19452); _i1 = (_i1 + 1))
          {
            long  _ct19454 = ((1052 < ((128 * _T_i2) + 128))? 1052: ((128 * _T_i2) + 128));
            #pragma ivdep
            for (long  _i2 = ((128 * _T_i2) + 1); (_i2 <= _ct19454); _i2 = (_i2 + 1))
            {
              Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((_i1 - 1) * ((((C / 2) - 2) - 1) + 1))) + (_i2 - 1))] = (((((Dx_1_img1[_i0][((-16 * _T_i1) + _i1)][(-2 + (2 * ((-128 * _T_i2) + _i2)))] + (4 * Dx_1_img1[_i0][((-16 * _T_i1) + _i1)][(-1 + (2 * ((-128 * _T_i2) + _i2)))])) + (6 * Dx_1_img1[_i0][((-16 * _T_i1) + _i1)][(2 * ((-128 * _T_i2) + _i2))])) + (4 * Dx_1_img1[_i0][((-16 * _T_i1) + _i1)][(1 + (2 * ((-128 * _T_i2) + _i2)))])) + Dx_1_img1[_i0][((-16 * _T_i1) + _i1)][(2 + (2 * ((-128 * _T_i2) + _i2)))]) * 0.0625f);
            }
          }
        }
      }
    }
  }
  #pragma omp parallel for schedule(static)
  for (long  _T_i1 = 0; (_T_i1 <= 32); _T_i1 = (_T_i1 + 1))
  {
    float  Dx_2_img2[3][16][260];
    for (long  _T_i2 = -1; (_T_i2 <= 4); _T_i2 = (_T_i2 + 1))
    {
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19455 = ((525 < ((16 * _T_i1) + 15))? 525: ((16 * _T_i1) + 15));
        long  _ct19456 = ((2 > (16 * _T_i1))? 2: (16 * _T_i1));
        for (long  _i1 = _ct19456; (_i1 <= _ct19455); _i1 = (_i1 + 1))
        {
          long  _ct19457 = ((1052 < ((256 * _T_i2) + 259))? 1052: ((256 * _T_i2) + 259));
          long  _ct19458 = ((1 > (256 * _T_i2))? 1: (256 * _T_i2));
          #pragma ivdep
          for (long  _i2 = _ct19458; (_i2 <= _ct19457); _i2 = (_i2 + 1))
          {
            Dx_2_img2[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (((((Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((-3 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))] + (4 * Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((-2 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))])) + (6 * Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((-1 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))])) + (4 * Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((2 * _i1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))])) + Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((1 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))]) * 0.0625f);
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19459 = ((525 < ((16 * _T_i1) + 15))? 525: ((16 * _T_i1) + 15));
        long  _ct19460 = ((2 > (16 * _T_i1))? 2: (16 * _T_i1));
        for (long  _i1 = _ct19460; (_i1 <= _ct19459); _i1 = (_i1 + 1))
        {
          long  _ct19461 = ((525 < ((128 * _T_i2) + 128))? 525: ((128 * _T_i2) + 128));
          long  _ct19462 = ((2 > ((128 * _T_i2) + 1))? 2: ((128 * _T_i2) + 1));
          #pragma ivdep
          for (long  _i2 = _ct19462; (_i2 <= _ct19461); _i2 = (_i2 + 1))
          {
            Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((_i1 - 2) * ((((C / 4) - 2) - 2) + 1))) + (_i2 - 2))] = (((((Dx_2_img2[_i0][((-16 * _T_i1) + _i1)][(-2 + (2 * ((-128 * _T_i2) + _i2)))] + (4 * Dx_2_img2[_i0][((-16 * _T_i1) + _i1)][(-1 + (2 * ((-128 * _T_i2) + _i2)))])) + (6 * Dx_2_img2[_i0][((-16 * _T_i1) + _i1)][(2 * ((-128 * _T_i2) + _i2))])) + (4 * Dx_2_img2[_i0][((-16 * _T_i1) + _i1)][(1 + (2 * ((-128 * _T_i2) + _i2)))])) + Dx_2_img2[_i0][((-16 * _T_i1) + _i1)][(2 + (2 * ((-128 * _T_i2) + _i2)))]) * 0.0625f);
          }
        }
      }
    }
  }
  #pragma omp parallel for schedule(static)
  for (long  _T_i1 = 0; (_T_i1 <= 32); _T_i1 = (_T_i1 + 1))
  {
    float  Dx_2_img1[3][16][260];
    for (long  _T_i2 = -1; (_T_i2 <= 4); _T_i2 = (_T_i2 + 1))
    {
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19463 = ((525 < ((16 * _T_i1) + 15))? 525: ((16 * _T_i1) + 15));
        long  _ct19464 = ((2 > (16 * _T_i1))? 2: (16 * _T_i1));
        for (long  _i1 = _ct19464; (_i1 <= _ct19463); _i1 = (_i1 + 1))
        {
          long  _ct19465 = ((1052 < ((256 * _T_i2) + 259))? 1052: ((256 * _T_i2) + 259));
          long  _ct19466 = ((1 > (256 * _T_i2))? 1: (256 * _T_i2));
          #pragma ivdep
          for (long  _i2 = _ct19466; (_i2 <= _ct19465); _i2 = (_i2 + 1))
          {
            Dx_2_img1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (((((Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((-3 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))] + (4 * Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((-2 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))])) + (6 * Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((-1 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))])) + (4 * Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((2 * _i1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))])) + Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((1 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))]) * 0.0625f);
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19467 = ((525 < ((16 * _T_i1) + 15))? 525: ((16 * _T_i1) + 15));
        long  _ct19468 = ((2 > (16 * _T_i1))? 2: (16 * _T_i1));
        for (long  _i1 = _ct19468; (_i1 <= _ct19467); _i1 = (_i1 + 1))
        {
          long  _ct19469 = ((525 < ((128 * _T_i2) + 128))? 525: ((128 * _T_i2) + 128));
          long  _ct19470 = ((2 > ((128 * _T_i2) + 1))? 2: ((128 * _T_i2) + 1));
          #pragma ivdep
          for (long  _i2 = _ct19470; (_i2 <= _ct19469); _i2 = (_i2 + 1))
          {
            Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((_i1 - 2) * ((((C / 4) - 2) - 2) + 1))) + (_i2 - 2))] = (((((Dx_2_img1[_i0][((-16 * _T_i1) + _i1)][(-2 + (2 * ((-128 * _T_i2) + _i2)))] + (4 * Dx_2_img1[_i0][((-16 * _T_i1) + _i1)][(-1 + (2 * ((-128 * _T_i2) + _i2)))])) + (6 * Dx_2_img1[_i0][((-16 * _T_i1) + _i1)][(2 * ((-128 * _T_i2) + _i2))])) + (4 * Dx_2_img1[_i0][((-16 * _T_i1) + _i1)][(1 + (2 * ((-128 * _T_i2) + _i2)))])) + Dx_2_img1[_i0][((-16 * _T_i1) + _i1)][(2 + (2 * ((-128 * _T_i2) + _i2)))]) * 0.0625f);
          }
        }
      }
    }
  }
  #pragma omp parallel for schedule(static)
  for (long  _T_i1 = 0; (_T_i1 <= 65); _T_i1 = (_T_i1 + 1))
  {
    float  Dx_1_mask[16][260];
    for (long  _T_i2 = -1; (_T_i2 <= 8); _T_i2 = (_T_i2 + 1))
    {
      long  _ct19471 = ((1052 < ((16 * _T_i1) + 15))? 1052: ((16 * _T_i1) + 15));
      long  _ct19472 = ((1 > (16 * _T_i1))? 1: (16 * _T_i1));
      for (long  _i1 = _ct19472; (_i1 <= _ct19471); _i1 = (_i1 + 1))
      {
        long  _ct19473 = ((2106 < ((256 * _T_i2) + 259))? 2106: ((256 * _T_i2) + 259));
        long  _ct19474 = ((0 > (256 * _T_i2))? 0: (256 * _T_i2));
        #pragma ivdep
        for (long  _i2 = _ct19474; (_i2 <= _ct19473); _i2 = (_i2 + 1))
        {
          Dx_1_mask[((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (((((mask[(((-2 + (2 * _i1)) * C) + _i2)] + (4 * mask[(((-1 + (2 * _i1)) * C) + _i2)])) + (6 * mask[(((2 * _i1) * C) + _i2)])) + (4 * mask[(((1 + (2 * _i1)) * C) + _i2)])) + mask[(((2 + (2 * _i1)) * C) + _i2)]) * 0.0625f);
        }
      }
      if ((_T_i2 >= 0))
      {
        long  _ct19475 = ((1052 < ((16 * _T_i1) + 15))? 1052: ((16 * _T_i1) + 15));
        long  _ct19476 = ((1 > (16 * _T_i1))? 1: (16 * _T_i1));
        for (long  _i1 = _ct19476; (_i1 <= _ct19475); _i1 = (_i1 + 1))
        {
          long  _ct19477 = ((1052 < ((128 * _T_i2) + 128))? 1052: ((128 * _T_i2) + 128));
          #pragma ivdep
          for (long  _i2 = ((128 * _T_i2) + 1); (_i2 <= _ct19477); _i2 = (_i2 + 1))
          {
            Dy_1_mask[(((_i1 - 1) * ((((C / 2) - 2) - 1) + 1)) + (_i2 - 1))] = (((((Dx_1_mask[((-16 * _T_i1) + _i1)][(-2 + (2 * ((-128 * _T_i2) + _i2)))] + (4 * Dx_1_mask[((-16 * _T_i1) + _i1)][(-1 + (2 * ((-128 * _T_i2) + _i2)))])) + (6 * Dx_1_mask[((-16 * _T_i1) + _i1)][(2 * ((-128 * _T_i2) + _i2))])) + (4 * Dx_1_mask[((-16 * _T_i1) + _i1)][(1 + (2 * ((-128 * _T_i2) + _i2)))])) + Dx_1_mask[((-16 * _T_i1) + _i1)][(2 + (2 * ((-128 * _T_i2) + _i2)))]) * 0.0625f);
          }
        }
      }
    }
  }
  #pragma omp parallel for schedule(static)
  for (long  _T_i1 = -1; (_T_i1 <= 32); _T_i1 = (_T_i1 + 1))
  {
    float  Dx_3_img1[3][14][152];
    float  Dx_2_mask[28][304];
    float  Dx_3_img2[3][14][152];
    float  Dy_3_img2[3][14][76];
    float  Dy_3_img1[3][14][76];
    float  Dy_2_mask[28][152];
    float  Ux_2_img2[3][28][76];
    float  Dx_3_mask[14][152];
    float  Ux_2_img1[3][28][76];
    float  Uy_2_img2[3][28][152];
    float  Uy_2_img1[3][28][152];
    float  Dy_3_mask[14][76];
    float  Res_3[3][14][76];
    float  Res_2[3][28][152];
    float  Col_2_x[3][28][76];
    for (long  _T_i2 = -1; (_T_i2 <= 4); _T_i2 = (_T_i2 + 1))
    {
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19478 = ((261 < ((8 * _T_i1) + 13))? 261: ((8 * _T_i1) + 13));
        long  _ct19479 = ((3 > (8 * _T_i1))? 3: (8 * _T_i1));
        for (long  _i1 = _ct19479; (_i1 <= _ct19478); _i1 = (_i1 + 1))
        {
          long  _ct19480 = ((525 < ((128 * _T_i2) + 151))? 525: ((128 * _T_i2) + 151));
          long  _ct19481 = ((2 > (128 * _T_i2))? 2: (128 * _T_i2));
          #pragma ivdep
          for (long  _i2 = _ct19481; (_i2 <= _ct19480); _i2 = (_i2 + 1))
          {
            Dx_3_img1[_i0][((-8 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((((Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-4 + (2 * _i1)) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))] + (4 * Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-3 + (2 * _i1)) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))])) + (6 * Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-2 + (2 * _i1)) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))])) + (4 * Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-1 + (2 * _i1)) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))])) + Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((2 * _i1) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))]) * 0.0625f);
          }
        }
      }
      long  _ct19482 = ((525 < ((16 * _T_i1) + 27))? 525: ((16 * _T_i1) + 27));
      long  _ct19483 = ((2 > (16 * _T_i1))? 2: (16 * _T_i1));
      for (long  _i1 = _ct19483; (_i1 <= _ct19482); _i1 = (_i1 + 1))
      {
        long  _ct19484 = ((1052 < ((256 * _T_i2) + 303))? 1052: ((256 * _T_i2) + 303));
        long  _ct19485 = ((1 > (256 * _T_i2))? 1: (256 * _T_i2));
        #pragma ivdep
        for (long  _i2 = _ct19485; (_i2 <= _ct19484); _i2 = (_i2 + 1))
        {
          Dx_2_mask[((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (((((Dy_1_mask[(((-3 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1)) + (-1 + _i2))] + (4 * Dy_1_mask[(((-2 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1)) + (-1 + _i2))])) + (6 * Dy_1_mask[(((-1 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1)) + (-1 + _i2))])) + (4 * Dy_1_mask[(((2 * _i1) * ((((C / 2) - 2) - 1) + 1)) + (-1 + _i2))])) + Dy_1_mask[(((1 + (2 * _i1)) * ((((C / 2) - 2) - 1) + 1)) + (-1 + _i2))]) * 0.0625f);
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19486 = ((261 < ((8 * _T_i1) + 13))? 261: ((8 * _T_i1) + 13));
        long  _ct19487 = ((3 > (8 * _T_i1))? 3: (8 * _T_i1));
        for (long  _i1 = _ct19487; (_i1 <= _ct19486); _i1 = (_i1 + 1))
        {
          long  _ct19488 = ((525 < ((128 * _T_i2) + 151))? 525: ((128 * _T_i2) + 151));
          long  _ct19489 = ((2 > (128 * _T_i2))? 2: (128 * _T_i2));
          #pragma ivdep
          for (long  _i2 = _ct19489; (_i2 <= _ct19488); _i2 = (_i2 + 1))
          {
            Dx_3_img2[_i0][((-8 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((((Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-4 + (2 * _i1)) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))] + (4 * Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-3 + (2 * _i1)) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))])) + (6 * Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-2 + (2 * _i1)) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))])) + (4 * Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-1 + (2 * _i1)) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))])) + Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((2 * _i1) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))]) * 0.0625f);
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19490 = ((261 < ((8 * _T_i1) + 13))? 261: ((8 * _T_i1) + 13));
        long  _ct19491 = ((3 > ((8 * _T_i1) + 1))? 3: ((8 * _T_i1) + 1));
        for (long  _i1 = _ct19491; (_i1 <= _ct19490); _i1 = (_i1 + 1))
        {
          long  _ct19492 = ((261 < ((64 * _T_i2) + 74))? 261: ((64 * _T_i2) + 74));
          long  _ct19493 = ((3 > ((64 * _T_i2) + 1))? 3: ((64 * _T_i2) + 1));
          #pragma ivdep
          for (long  _i2 = _ct19493; (_i2 <= _ct19492); _i2 = (_i2 + 1))
          {
            Dy_3_img2[_i0][((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] = (((((Dx_3_img2[_i0][((-8 * _T_i1) + _i1)][(-2 + (2 * ((-64 * _T_i2) + _i2)))] + (4 * Dx_3_img2[_i0][((-8 * _T_i1) + _i1)][(-1 + (2 * ((-64 * _T_i2) + _i2)))])) + (6 * Dx_3_img2[_i0][((-8 * _T_i1) + _i1)][(2 * ((-64 * _T_i2) + _i2))])) + (4 * Dx_3_img2[_i0][((-8 * _T_i1) + _i1)][(1 + (2 * ((-64 * _T_i2) + _i2)))])) + Dx_3_img2[_i0][((-8 * _T_i1) + _i1)][(2 + (2 * ((-64 * _T_i2) + _i2)))]) * 0.0625f);
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19494 = ((261 < ((8 * _T_i1) + 13))? 261: ((8 * _T_i1) + 13));
        long  _ct19495 = ((3 > ((8 * _T_i1) + 1))? 3: ((8 * _T_i1) + 1));
        for (long  _i1 = _ct19495; (_i1 <= _ct19494); _i1 = (_i1 + 1))
        {
          long  _ct19496 = ((261 < ((64 * _T_i2) + 74))? 261: ((64 * _T_i2) + 74));
          long  _ct19497 = ((3 > ((64 * _T_i2) + 1))? 3: ((64 * _T_i2) + 1));
          #pragma ivdep
          for (long  _i2 = _ct19497; (_i2 <= _ct19496); _i2 = (_i2 + 1))
          {
            Dy_3_img1[_i0][((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] = (((((Dx_3_img1[_i0][((-8 * _T_i1) + _i1)][(-2 + (2 * ((-64 * _T_i2) + _i2)))] + (4 * Dx_3_img1[_i0][((-8 * _T_i1) + _i1)][(-1 + (2 * ((-64 * _T_i2) + _i2)))])) + (6 * Dx_3_img1[_i0][((-8 * _T_i1) + _i1)][(2 * ((-64 * _T_i2) + _i2))])) + (4 * Dx_3_img1[_i0][((-8 * _T_i1) + _i1)][(1 + (2 * ((-64 * _T_i2) + _i2)))])) + Dx_3_img1[_i0][((-8 * _T_i1) + _i1)][(2 + (2 * ((-64 * _T_i2) + _i2)))]) * 0.0625f);
          }
        }
      }
      long  _ct19498 = ((525 < ((16 * _T_i1) + 26))? 525: ((16 * _T_i1) + 26));
      long  _ct19499 = ((2 > ((16 * _T_i1) + 1))? 2: ((16 * _T_i1) + 1));
      for (long  _i1 = _ct19499; (_i1 <= _ct19498); _i1 = (_i1 + 1))
      {
        long  _ct19500 = ((525 < ((128 * _T_i2) + 149))? 525: ((128 * _T_i2) + 149));
        long  _ct19501 = ((2 > ((128 * _T_i2) + 2))? 2: ((128 * _T_i2) + 2));
        #pragma ivdep
        for (long  _i2 = _ct19501; (_i2 <= _ct19500); _i2 = (_i2 + 1))
        {
          Dy_2_mask[((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((((Dx_2_mask[((-16 * _T_i1) + _i1)][(-2 + (2 * ((-128 * _T_i2) + _i2)))] + (4 * Dx_2_mask[((-16 * _T_i1) + _i1)][(-1 + (2 * ((-128 * _T_i2) + _i2)))])) + (6 * Dx_2_mask[((-16 * _T_i1) + _i1)][(2 * ((-128 * _T_i2) + _i2))])) + (4 * Dx_2_mask[((-16 * _T_i1) + _i1)][(1 + (2 * ((-128 * _T_i2) + _i2)))])) + Dx_2_mask[((-16 * _T_i1) + _i1)][(2 + (2 * ((-128 * _T_i2) + _i2)))]) * 0.0625f);
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19502 = ((520 < ((16 * _T_i1) + 24))? 520: ((16 * _T_i1) + 24));
        long  _ct19503 = ((8 > ((16 * _T_i1) + 2))? 8: ((16 * _T_i1) + 2));
        for (long  _i1 = _ct19503; (_i1 <= _ct19502); _i1 = (_i1 + 2))
        {
          long  _ct19504 = ((261 < ((64 * _T_i2) + 73))? 261: ((64 * _T_i2) + 73));
          long  _ct19505 = ((3 > ((64 * _T_i2) + 2))? 3: ((64 * _T_i2) + 2));
          #pragma ivdep
          for (long  _i2 = _ct19505; (_i2 <= _ct19504); _i2 = (_i2 + 1))
          {
            Ux_2_img2[_i0][((-16 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] = (((Dy_3_img2[_i0][((((-16 * _T_i1) + _i1) / 2) - 1)][((-64 * _T_i2) + _i2)] + (6 * Dy_3_img2[_i0][(((-16 * _T_i1) + _i1) / 2)][((-64 * _T_i2) + _i2)])) + Dy_3_img2[_i0][((((-16 * _T_i1) + _i1) / 2) + 1)][((-64 * _T_i2) + _i2)]) * 0.125f);
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19506 = ((521 < ((16 * _T_i1) + 25))? 521: ((16 * _T_i1) + 25));
        long  _ct19507 = ((7 > ((16 * _T_i1) + 3))? 7: ((16 * _T_i1) + 3));
        for (long  _i1 = _ct19507; (_i1 <= _ct19506); _i1 = (_i1 + 2))
        {
          long  _ct19508 = ((261 < ((64 * _T_i2) + 73))? 261: ((64 * _T_i2) + 73));
          long  _ct19509 = ((3 > ((64 * _T_i2) + 2))? 3: ((64 * _T_i2) + 2));
          #pragma ivdep
          for (long  _i2 = _ct19509; (_i2 <= _ct19508); _i2 = (_i2 + 1))
          {
            Ux_2_img2[_i0][((-16 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] = (((4 * Dy_3_img2[_i0][((-1 + ((-16 * _T_i1) + _i1)) / 2)][((-64 * _T_i2) + _i2)]) + (4 * Dy_3_img2[_i0][((1 + ((-16 * _T_i1) + _i1)) / 2)][((-64 * _T_i2) + _i2)])) * 0.125f);
          }
        }
      }
      long  _ct19510 = ((261 < ((8 * _T_i1) + 12))? 261: ((8 * _T_i1) + 12));
      long  _ct19511 = ((3 > ((8 * _T_i1) + 1))? 3: ((8 * _T_i1) + 1));
      for (long  _i1 = _ct19511; (_i1 <= _ct19510); _i1 = (_i1 + 1))
      {
        long  _ct19512 = ((525 < ((128 * _T_i2) + 147))? 525: ((128 * _T_i2) + 147));
        long  _ct19513 = ((2 > ((128 * _T_i2) + 4))? 2: ((128 * _T_i2) + 4));
        #pragma ivdep
        for (long  _i2 = _ct19513; (_i2 <= _ct19512); _i2 = (_i2 + 1))
        {
          Dx_3_mask[((-8 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((((Dy_2_mask[(-2 + (2 * ((-8 * _T_i1) + _i1)))][((-128 * _T_i2) + _i2)] + (4 * Dy_2_mask[(-1 + (2 * ((-8 * _T_i1) + _i1)))][((-128 * _T_i2) + _i2)])) + (6 * Dy_2_mask[(2 * ((-8 * _T_i1) + _i1))][((-128 * _T_i2) + _i2)])) + (4 * Dy_2_mask[(1 + (2 * ((-8 * _T_i1) + _i1)))][((-128 * _T_i2) + _i2)])) + Dy_2_mask[(2 + (2 * ((-8 * _T_i1) + _i1)))][((-128 * _T_i2) + _i2)]) * 0.0625f);
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19514 = ((520 < ((16 * _T_i1) + 24))? 520: ((16 * _T_i1) + 24));
        long  _ct19515 = ((8 > ((16 * _T_i1) + 2))? 8: ((16 * _T_i1) + 2));
        for (long  _i1 = _ct19515; (_i1 <= _ct19514); _i1 = (_i1 + 2))
        {
          long  _ct19516 = ((261 < ((64 * _T_i2) + 73))? 261: ((64 * _T_i2) + 73));
          long  _ct19517 = ((3 > ((64 * _T_i2) + 2))? 3: ((64 * _T_i2) + 2));
          #pragma ivdep
          for (long  _i2 = _ct19517; (_i2 <= _ct19516); _i2 = (_i2 + 1))
          {
            Ux_2_img1[_i0][((-16 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] = (((Dy_3_img1[_i0][((((-16 * _T_i1) + _i1) / 2) - 1)][((-64 * _T_i2) + _i2)] + (6 * Dy_3_img1[_i0][(((-16 * _T_i1) + _i1) / 2)][((-64 * _T_i2) + _i2)])) + Dy_3_img1[_i0][((((-16 * _T_i1) + _i1) / 2) + 1)][((-64 * _T_i2) + _i2)]) * 0.125f);
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19518 = ((521 < ((16 * _T_i1) + 25))? 521: ((16 * _T_i1) + 25));
        long  _ct19519 = ((7 > ((16 * _T_i1) + 3))? 7: ((16 * _T_i1) + 3));
        for (long  _i1 = _ct19519; (_i1 <= _ct19518); _i1 = (_i1 + 2))
        {
          long  _ct19520 = ((261 < ((64 * _T_i2) + 73))? 261: ((64 * _T_i2) + 73));
          long  _ct19521 = ((3 > ((64 * _T_i2) + 2))? 3: ((64 * _T_i2) + 2));
          #pragma ivdep
          for (long  _i2 = _ct19521; (_i2 <= _ct19520); _i2 = (_i2 + 1))
          {
            Ux_2_img1[_i0][((-16 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] = (((4 * Dy_3_img1[_i0][((-1 + ((-16 * _T_i1) + _i1)) / 2)][((-64 * _T_i2) + _i2)]) + (4 * Dy_3_img1[_i0][((1 + ((-16 * _T_i1) + _i1)) / 2)][((-64 * _T_i2) + _i2)])) * 0.125f);
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19522 = ((521 < ((16 * _T_i1) + 24))? 521: ((16 * _T_i1) + 24));
        long  _ct19523 = ((7 > ((16 * _T_i1) + 3))? 7: ((16 * _T_i1) + 3));
        for (long  _i1 = _ct19523; (_i1 <= _ct19522); _i1 = (_i1 + 1))
        {
          long  _ct19524 = ((520 < ((128 * _T_i2) + 144))? 520: ((128 * _T_i2) + 144));
          long  _ct19525 = ((8 > ((128 * _T_i2) + 6))? 8: ((128 * _T_i2) + 6));
          #pragma ivdep
          for (long  _i2 = _ct19525; (_i2 <= _ct19524); _i2 = (_i2 + 2))
          {
            Uy_2_img2[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-2 + _i1) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))] - (((Ux_2_img2[_i0][((-16 * _T_i1) + _i1)][((((-128 * _T_i2) + _i2) / 2) - 1)] + (6 * Ux_2_img2[_i0][((-16 * _T_i1) + _i1)][(((-128 * _T_i2) + _i2) / 2)])) + Ux_2_img2[_i0][((-16 * _T_i1) + _i1)][((((-128 * _T_i2) + _i2) / 2) + 1)]) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19526 = ((521 < ((16 * _T_i1) + 24))? 521: ((16 * _T_i1) + 24));
        long  _ct19527 = ((7 > ((16 * _T_i1) + 3))? 7: ((16 * _T_i1) + 3));
        for (long  _i1 = _ct19527; (_i1 <= _ct19526); _i1 = (_i1 + 1))
        {
          long  _ct19528 = ((521 < ((128 * _T_i2) + 145))? 521: ((128 * _T_i2) + 145));
          long  _ct19529 = ((7 > ((128 * _T_i2) + 7))? 7: ((128 * _T_i2) + 7));
          #pragma ivdep
          for (long  _i2 = _ct19529; (_i2 <= _ct19528); _i2 = (_i2 + 2))
          {
            Uy_2_img2[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-2 + _i1) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))] - (((4 * Ux_2_img2[_i0][((-16 * _T_i1) + _i1)][((-1 + ((-128 * _T_i2) + _i2)) / 2)]) + (4 * Ux_2_img2[_i0][((-16 * _T_i1) + _i1)][((1 + ((-128 * _T_i2) + _i2)) / 2)])) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19530 = ((521 < ((16 * _T_i1) + 24))? 521: ((16 * _T_i1) + 24));
        long  _ct19531 = ((7 > ((16 * _T_i1) + 3))? 7: ((16 * _T_i1) + 3));
        for (long  _i1 = _ct19531; (_i1 <= _ct19530); _i1 = (_i1 + 1))
        {
          long  _ct19532 = ((520 < ((128 * _T_i2) + 144))? 520: ((128 * _T_i2) + 144));
          long  _ct19533 = ((8 > ((128 * _T_i2) + 6))? 8: ((128 * _T_i2) + 6));
          #pragma ivdep
          for (long  _i2 = _ct19533; (_i2 <= _ct19532); _i2 = (_i2 + 2))
          {
            Uy_2_img1[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-2 + _i1) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))] - (((Ux_2_img1[_i0][((-16 * _T_i1) + _i1)][((((-128 * _T_i2) + _i2) / 2) - 1)] + (6 * Ux_2_img1[_i0][((-16 * _T_i1) + _i1)][(((-128 * _T_i2) + _i2) / 2)])) + Ux_2_img1[_i0][((-16 * _T_i1) + _i1)][((((-128 * _T_i2) + _i2) / 2) + 1)]) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19534 = ((521 < ((16 * _T_i1) + 24))? 521: ((16 * _T_i1) + 24));
        long  _ct19535 = ((7 > ((16 * _T_i1) + 3))? 7: ((16 * _T_i1) + 3));
        for (long  _i1 = _ct19535; (_i1 <= _ct19534); _i1 = (_i1 + 1))
        {
          long  _ct19536 = ((521 < ((128 * _T_i2) + 145))? 521: ((128 * _T_i2) + 145));
          long  _ct19537 = ((7 > ((128 * _T_i2) + 7))? 7: ((128 * _T_i2) + 7));
          #pragma ivdep
          for (long  _i2 = _ct19537; (_i2 <= _ct19536); _i2 = (_i2 + 2))
          {
            Uy_2_img1[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((-2 + _i1) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))] - (((4 * Ux_2_img1[_i0][((-16 * _T_i1) + _i1)][((-1 + ((-128 * _T_i2) + _i2)) / 2)]) + (4 * Ux_2_img1[_i0][((-16 * _T_i1) + _i1)][((1 + ((-128 * _T_i2) + _i2)) / 2)])) * 0.125f));
          }
        }
      }
      long  _ct19538 = ((261 < ((8 * _T_i1) + 12))? 261: ((8 * _T_i1) + 12));
      long  _ct19539 = ((3 > ((8 * _T_i1) + 2))? 3: ((8 * _T_i1) + 2));
      for (long  _i1 = _ct19539; (_i1 <= _ct19538); _i1 = (_i1 + 1))
      {
        long  _ct19540 = ((261 < ((64 * _T_i2) + 72))? 261: ((64 * _T_i2) + 72));
        long  _ct19541 = ((3 > ((64 * _T_i2) + 3))? 3: ((64 * _T_i2) + 3));
        #pragma ivdep
        for (long  _i2 = _ct19541; (_i2 <= _ct19540); _i2 = (_i2 + 1))
        {
          Dy_3_mask[((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] = (((((Dx_3_mask[((-8 * _T_i1) + _i1)][(-2 + (2 * ((-64 * _T_i2) + _i2)))] + (4 * Dx_3_mask[((-8 * _T_i1) + _i1)][(-1 + (2 * ((-64 * _T_i2) + _i2)))])) + (6 * Dx_3_mask[((-8 * _T_i1) + _i1)][(2 * ((-64 * _T_i2) + _i2))])) + (4 * Dx_3_mask[((-8 * _T_i1) + _i1)][(1 + (2 * ((-64 * _T_i2) + _i2)))])) + Dx_3_mask[((-8 * _T_i1) + _i1)][(2 + (2 * ((-64 * _T_i2) + _i2)))]) * 0.0625f);
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19542 = ((261 < ((8 * _T_i1) + 11))? 261: ((8 * _T_i1) + 11));
        long  _ct19543 = ((3 > ((8 * _T_i1) + 2))? 3: ((8 * _T_i1) + 2));
        for (long  _i1 = _ct19543; (_i1 <= _ct19542); _i1 = (_i1 + 1))
        {
          long  _ct19544 = ((261 < ((64 * _T_i2) + 71))? 261: ((64 * _T_i2) + 71));
          long  _ct19545 = ((3 > ((64 * _T_i2) + 4))? 3: ((64 * _T_i2) + 4));
          #pragma ivdep
          for (long  _i2 = _ct19545; (_i2 <= _ct19544); _i2 = (_i2 + 1))
          {
            Res_3[_i0][((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] = ((Dy_3_img1[_i0][((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] * Dy_3_mask[((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)]) + (Dy_3_img2[_i0][((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] * (1 - Dy_3_mask[((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)])));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19546 = ((521 < ((16 * _T_i1) + 23))? 521: ((16 * _T_i1) + 23));
        long  _ct19547 = ((7 > ((16 * _T_i1) + 4))? 7: ((16 * _T_i1) + 4));
        for (long  _i1 = _ct19547; (_i1 <= _ct19546); _i1 = (_i1 + 1))
        {
          long  _ct19548 = ((521 < ((128 * _T_i2) + 143))? 521: ((128 * _T_i2) + 143));
          long  _ct19549 = ((7 > ((128 * _T_i2) + 8))? 7: ((128 * _T_i2) + 8));
          #pragma ivdep
          for (long  _i2 = _ct19549; (_i2 <= _ct19548); _i2 = (_i2 + 1))
          {
            Res_2[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = ((Uy_2_img1[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] * Dy_2_mask[((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)]) + (Uy_2_img2[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] * (1 - Dy_2_mask[((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)])));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19550 = ((520 < ((16 * _T_i1) + 22))? 520: ((16 * _T_i1) + 22));
        long  _ct19551 = ((8 > ((16 * _T_i1) + 6))? 8: ((16 * _T_i1) + 6));
        for (long  _i1 = _ct19551; (_i1 <= _ct19550); _i1 = (_i1 + 2))
        {
          long  _ct19552 = ((261 < ((64 * _T_i2) + 70))? 261: ((64 * _T_i2) + 70));
          long  _ct19553 = ((3 > ((64 * _T_i2) + 5))? 3: ((64 * _T_i2) + 5));
          #pragma ivdep
          for (long  _i2 = _ct19553; (_i2 <= _ct19552); _i2 = (_i2 + 1))
          {
            Col_2_x[_i0][((-16 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] = (((Res_3[_i0][((((-16 * _T_i1) + _i1) / 2) - 1)][((-64 * _T_i2) + _i2)] + (6 * Res_3[_i0][(((-16 * _T_i1) + _i1) / 2)][((-64 * _T_i2) + _i2)])) + Res_3[_i0][((((-16 * _T_i1) + _i1) / 2) + 1)][((-64 * _T_i2) + _i2)]) * 0.125f);
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19554 = ((521 < ((16 * _T_i1) + 21))? 521: ((16 * _T_i1) + 21));
        long  _ct19555 = ((7 > ((16 * _T_i1) + 5))? 7: ((16 * _T_i1) + 5));
        for (long  _i1 = _ct19555; (_i1 <= _ct19554); _i1 = (_i1 + 2))
        {
          long  _ct19556 = ((261 < ((64 * _T_i2) + 70))? 261: ((64 * _T_i2) + 70));
          long  _ct19557 = ((3 > ((64 * _T_i2) + 5))? 3: ((64 * _T_i2) + 5));
          #pragma ivdep
          for (long  _i2 = _ct19557; (_i2 <= _ct19556); _i2 = (_i2 + 1))
          {
            Col_2_x[_i0][((-16 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)] = (((4 * Res_3[_i0][((-1 + ((-16 * _T_i1) + _i1)) / 2)][((-64 * _T_i2) + _i2)]) + (4 * Res_3[_i0][((1 + ((-16 * _T_i1) + _i1)) / 2)][((-64 * _T_i2) + _i2)])) * 0.125f);
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19558 = ((521 < ((16 * _T_i1) + 21))? 521: ((16 * _T_i1) + 21));
        long  _ct19559 = ((7 > ((16 * _T_i1) + 6))? 7: ((16 * _T_i1) + 6));
        for (long  _i1 = _ct19559; (_i1 <= _ct19558); _i1 = (_i1 + 1))
        {
          long  _ct19560 = ((520 < ((128 * _T_i2) + 138))? 520: ((128 * _T_i2) + 138));
          long  _ct19561 = ((8 > ((128 * _T_i2) + 12))? 8: ((128 * _T_i2) + 12));
          #pragma ivdep
          for (long  _i2 = _ct19561; (_i2 <= _ct19560); _i2 = (_i2 + 2))
          {
            Col_2[(((_i0 * ((((((R / 4) - 8) + 2) - 7) + 1) * (((((C / 4) - 8) + 2) - 7) + 1))) + ((_i1 - 7) * (((((C / 4) - 8) + 2) - 7) + 1))) + (_i2 - 7))] = (Res_2[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] + (((Col_2_x[_i0][((-16 * _T_i1) + _i1)][((((-128 * _T_i2) + _i2) / 2) - 1)] + (6 * Col_2_x[_i0][((-16 * _T_i1) + _i1)][(((-128 * _T_i2) + _i2) / 2)])) + Col_2_x[_i0][((-16 * _T_i1) + _i1)][((((-128 * _T_i2) + _i2) / 2) + 1)]) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19562 = ((521 < ((16 * _T_i1) + 21))? 521: ((16 * _T_i1) + 21));
        long  _ct19563 = ((7 > ((16 * _T_i1) + 6))? 7: ((16 * _T_i1) + 6));
        for (long  _i1 = _ct19563; (_i1 <= _ct19562); _i1 = (_i1 + 1))
        {
          long  _ct19564 = ((521 < ((128 * _T_i2) + 139))? 521: ((128 * _T_i2) + 139));
          long  _ct19565 = ((7 > ((128 * _T_i2) + 13))? 7: ((128 * _T_i2) + 13));
          #pragma ivdep
          for (long  _i2 = _ct19565; (_i2 <= _ct19564); _i2 = (_i2 + 2))
          {
            Col_2[(((_i0 * ((((((R / 4) - 8) + 2) - 7) + 1) * (((((C / 4) - 8) + 2) - 7) + 1))) + ((_i1 - 7) * (((((C / 4) - 8) + 2) - 7) + 1))) + (_i2 - 7))] = (Res_2[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] + (((4 * Col_2_x[_i0][((-16 * _T_i1) + _i1)][((-1 + ((-128 * _T_i2) + _i2)) / 2)]) + (4 * Col_2_x[_i0][((-16 * _T_i1) + _i1)][((1 + ((-128 * _T_i2) + _i2)) / 2)])) * 0.125f));
          }
        }
      }
    }
  }
  #pragma omp parallel for schedule(static)
  for (long  _T_i1 = 0; (_T_i1 <= 65); _T_i1 = (_T_i1 + 1))
  {
    float  Ux_1_img2[3][16][131];
    float  Col_1_x[3][16][131];
    float  Ux_1_img1[3][16][131];
    float  Uy_1_img2[3][16][262];
    float  Uy_1_img1[3][16][262];
    float  Res_1[3][16][262];
    for (long  _T_i2 = 0; (_T_i2 <= 4); _T_i2 = (_T_i2 + 1))
    {
      if ((_T_i1 >= 1))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          long  _ct19566 = ((1040 < ((16 * _T_i1) + 14))? 1040: ((16 * _T_i1) + 14));
          for (long  _i1 = (16 * _T_i1); (_i1 <= _ct19566); _i1 = (_i1 + 2))
          {
            long  _ct19567 = ((521 < ((128 * _T_i2) + 130))? 521: ((128 * _T_i2) + 130));
            long  _ct19568 = ((7 > (128 * _T_i2))? 7: (128 * _T_i2));
            #pragma ivdep
            for (long  _i2 = _ct19568; (_i2 <= _ct19567); _i2 = (_i2 + 1))
            {
              Ux_1_img2[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((((_i1 / 2) - 1) - 2) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))] + (6 * Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + (((_i1 / 2) - 2) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))])) + Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((((_i1 / 2) + 1) - 2) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))]) * 0.125f);
            }
          }
        }
      }
      if ((_T_i1 <= 64))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          long  _ct19569 = ((15 > ((16 * _T_i1) + 1))? 15: ((16 * _T_i1) + 1));
          for (long  _i1 = _ct19569; (_i1 <= ((16 * _T_i1) + 15)); _i1 = (_i1 + 2))
          {
            long  _ct19570 = ((521 < ((128 * _T_i2) + 130))? 521: ((128 * _T_i2) + 130));
            long  _ct19571 = ((7 > (128 * _T_i2))? 7: (128 * _T_i2));
            #pragma ivdep
            for (long  _i2 = _ct19571; (_i2 <= _ct19570); _i2 = (_i2 + 1))
            {
              Ux_1_img2[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((4 * Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((((_i1 - 1) / 2) - 2) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))]) + (4 * Dy_2_img2[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((((_i1 + 1) / 2) - 2) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))])) * 0.125f);
            }
          }
        }
      }
      if ((_T_i1 >= 1))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          long  _ct19572 = ((1040 < ((16 * _T_i1) + 14))? 1040: ((16 * _T_i1) + 14));
          for (long  _i1 = (16 * _T_i1); (_i1 <= _ct19572); _i1 = (_i1 + 2))
          {
            long  _ct19573 = ((521 < ((128 * _T_i2) + 130))? 521: ((128 * _T_i2) + 130));
            long  _ct19574 = ((7 > (128 * _T_i2))? 7: (128 * _T_i2));
            #pragma ivdep
            for (long  _i2 = _ct19574; (_i2 <= _ct19573); _i2 = (_i2 + 1))
            {
              Col_1_x[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((Col_2[(((_i0 * ((((((R / 4) - 8) + 2) - 7) + 1) * (((((C / 4) - 8) + 2) - 7) + 1))) + ((((_i1 / 2) - 1) - 7) * (((((C / 4) - 8) + 2) - 7) + 1))) + (-7 + _i2))] + (6 * Col_2[(((_i0 * ((((((R / 4) - 8) + 2) - 7) + 1) * (((((C / 4) - 8) + 2) - 7) + 1))) + (((_i1 / 2) - 7) * (((((C / 4) - 8) + 2) - 7) + 1))) + (-7 + _i2))])) + Col_2[(((_i0 * ((((((R / 4) - 8) + 2) - 7) + 1) * (((((C / 4) - 8) + 2) - 7) + 1))) + ((((_i1 / 2) + 1) - 7) * (((((C / 4) - 8) + 2) - 7) + 1))) + (-7 + _i2))]) * 0.125f);
            }
          }
        }
      }
      if ((_T_i1 <= 64))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          long  _ct19575 = ((15 > ((16 * _T_i1) + 1))? 15: ((16 * _T_i1) + 1));
          for (long  _i1 = _ct19575; (_i1 <= ((16 * _T_i1) + 15)); _i1 = (_i1 + 2))
          {
            long  _ct19576 = ((521 < ((128 * _T_i2) + 130))? 521: ((128 * _T_i2) + 130));
            long  _ct19577 = ((7 > (128 * _T_i2))? 7: (128 * _T_i2));
            #pragma ivdep
            for (long  _i2 = _ct19577; (_i2 <= _ct19576); _i2 = (_i2 + 1))
            {
              Col_1_x[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((4 * Col_2[(((_i0 * ((((((R / 4) - 8) + 2) - 7) + 1) * (((((C / 4) - 8) + 2) - 7) + 1))) + ((((_i1 - 1) / 2) - 7) * (((((C / 4) - 8) + 2) - 7) + 1))) + (-7 + _i2))]) + (4 * Col_2[(((_i0 * ((((((R / 4) - 8) + 2) - 7) + 1) * (((((C / 4) - 8) + 2) - 7) + 1))) + ((((_i1 + 1) / 2) - 7) * (((((C / 4) - 8) + 2) - 7) + 1))) + (-7 + _i2))])) * 0.125f);
            }
          }
        }
      }
      if ((_T_i1 >= 1))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          long  _ct19578 = ((1040 < ((16 * _T_i1) + 14))? 1040: ((16 * _T_i1) + 14));
          for (long  _i1 = (16 * _T_i1); (_i1 <= _ct19578); _i1 = (_i1 + 2))
          {
            long  _ct19579 = ((521 < ((128 * _T_i2) + 130))? 521: ((128 * _T_i2) + 130));
            long  _ct19580 = ((7 > (128 * _T_i2))? 7: (128 * _T_i2));
            #pragma ivdep
            for (long  _i2 = _ct19580; (_i2 <= _ct19579); _i2 = (_i2 + 1))
            {
              Ux_1_img1[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((((_i1 / 2) - 1) - 2) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))] + (6 * Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + (((_i1 / 2) - 2) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))])) + Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((((_i1 / 2) + 1) - 2) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))]) * 0.125f);
            }
          }
        }
      }
      if ((_T_i1 <= 64))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          long  _ct19581 = ((15 > ((16 * _T_i1) + 1))? 15: ((16 * _T_i1) + 1));
          for (long  _i1 = _ct19581; (_i1 <= ((16 * _T_i1) + 15)); _i1 = (_i1 + 2))
          {
            long  _ct19582 = ((521 < ((128 * _T_i2) + 130))? 521: ((128 * _T_i2) + 130));
            long  _ct19583 = ((7 > (128 * _T_i2))? 7: (128 * _T_i2));
            #pragma ivdep
            for (long  _i2 = _ct19583; (_i2 <= _ct19582); _i2 = (_i2 + 1))
            {
              Ux_1_img1[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((4 * Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((((_i1 - 1) / 2) - 2) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))]) + (4 * Dy_2_img1[(((_i0 * (((((R / 4) - 2) - 2) + 1) * ((((C / 4) - 2) - 2) + 1))) + ((((_i1 + 1) / 2) - 2) * ((((C / 4) - 2) - 2) + 1))) + (-2 + _i2))])) * 0.125f);
            }
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19584 = ((1040 < ((16 * _T_i1) + 15))? 1040: ((16 * _T_i1) + 15));
        long  _ct19585 = ((15 > (16 * _T_i1))? 15: (16 * _T_i1));
        for (long  _i1 = _ct19585; (_i1 <= _ct19584); _i1 = (_i1 + 1))
        {
          long  _ct19586 = ((1040 < ((256 * _T_i2) + 260))? 1040: ((256 * _T_i2) + 260));
          long  _ct19587 = ((16 > ((256 * _T_i2) + 2))? 16: ((256 * _T_i2) + 2));
          #pragma ivdep
          for (long  _i2 = _ct19587; (_i2 <= _ct19586); _i2 = (_i2 + 2))
          {
            Uy_1_img2[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((-1 + _i1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))] - (((Ux_1_img2[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) - 1)] + (6 * Ux_1_img2[_i0][((-16 * _T_i1) + _i1)][(((-256 * _T_i2) + _i2) / 2)])) + Ux_1_img2[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) + 1)]) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19588 = ((1040 < ((16 * _T_i1) + 15))? 1040: ((16 * _T_i1) + 15));
        long  _ct19589 = ((15 > (16 * _T_i1))? 15: (16 * _T_i1));
        for (long  _i1 = _ct19589; (_i1 <= _ct19588); _i1 = (_i1 + 1))
        {
          long  _ct19590 = ((1039 < ((256 * _T_i2) + 259))? 1039: ((256 * _T_i2) + 259));
          long  _ct19591 = ((15 > ((256 * _T_i2) + 1))? 15: ((256 * _T_i2) + 1));
          #pragma ivdep
          for (long  _i2 = _ct19591; (_i2 <= _ct19590); _i2 = (_i2 + 2))
          {
            Uy_1_img2[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((-1 + _i1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))] - (((4 * Ux_1_img2[_i0][((-16 * _T_i1) + _i1)][((-1 + ((-256 * _T_i2) + _i2)) / 2)]) + (4 * Ux_1_img2[_i0][((-16 * _T_i1) + _i1)][((1 + ((-256 * _T_i2) + _i2)) / 2)])) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19592 = ((1040 < ((16 * _T_i1) + 15))? 1040: ((16 * _T_i1) + 15));
        long  _ct19593 = ((15 > (16 * _T_i1))? 15: (16 * _T_i1));
        for (long  _i1 = _ct19593; (_i1 <= _ct19592); _i1 = (_i1 + 1))
        {
          long  _ct19594 = ((1040 < ((256 * _T_i2) + 260))? 1040: ((256 * _T_i2) + 260));
          long  _ct19595 = ((16 > ((256 * _T_i2) + 2))? 16: ((256 * _T_i2) + 2));
          #pragma ivdep
          for (long  _i2 = _ct19595; (_i2 <= _ct19594); _i2 = (_i2 + 2))
          {
            Uy_1_img1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((-1 + _i1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))] - (((Ux_1_img1[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) - 1)] + (6 * Ux_1_img1[_i0][((-16 * _T_i1) + _i1)][(((-256 * _T_i2) + _i2) / 2)])) + Ux_1_img1[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) + 1)]) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19596 = ((1040 < ((16 * _T_i1) + 15))? 1040: ((16 * _T_i1) + 15));
        long  _ct19597 = ((15 > (16 * _T_i1))? 15: (16 * _T_i1));
        for (long  _i1 = _ct19597; (_i1 <= _ct19596); _i1 = (_i1 + 1))
        {
          long  _ct19598 = ((1039 < ((256 * _T_i2) + 259))? 1039: ((256 * _T_i2) + 259));
          long  _ct19599 = ((15 > ((256 * _T_i2) + 1))? 15: ((256 * _T_i2) + 1));
          #pragma ivdep
          for (long  _i2 = _ct19599; (_i2 <= _ct19598); _i2 = (_i2 + 2))
          {
            Uy_1_img1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((-1 + _i1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))] - (((4 * Ux_1_img1[_i0][((-16 * _T_i1) + _i1)][((-1 + ((-256 * _T_i2) + _i2)) / 2)]) + (4 * Ux_1_img1[_i0][((-16 * _T_i1) + _i1)][((1 + ((-256 * _T_i2) + _i2)) / 2)])) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19600 = ((1040 < ((16 * _T_i1) + 15))? 1040: ((16 * _T_i1) + 15));
        long  _ct19601 = ((15 > (16 * _T_i1))? 15: (16 * _T_i1));
        for (long  _i1 = _ct19601; (_i1 <= _ct19600); _i1 = (_i1 + 1))
        {
          long  _ct19602 = ((1040 < ((256 * _T_i2) + 259))? 1040: ((256 * _T_i2) + 259));
          long  _ct19603 = ((15 > ((256 * _T_i2) + 2))? 15: ((256 * _T_i2) + 2));
          #pragma ivdep
          for (long  _i2 = _ct19603; (_i2 <= _ct19602); _i2 = (_i2 + 1))
          {
            Res_1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = ((Uy_1_img1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] * Dy_1_mask[(((-1 + _i1) * ((((C / 2) - 2) - 1) + 1)) + (-1 + _i2))]) + (Uy_1_img2[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] * (1 - Dy_1_mask[(((-1 + _i1) * ((((C / 2) - 2) - 1) + 1)) + (-1 + _i2))])));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19604 = ((1040 < ((16 * _T_i1) + 15))? 1040: ((16 * _T_i1) + 15));
        long  _ct19605 = ((15 > (16 * _T_i1))? 15: (16 * _T_i1));
        for (long  _i1 = _ct19605; (_i1 <= _ct19604); _i1 = (_i1 + 1))
        {
          long  _ct19606 = ((1040 < ((256 * _T_i2) + 258))? 1040: ((256 * _T_i2) + 258));
          long  _ct19607 = ((16 > ((256 * _T_i2) + 4))? 16: ((256 * _T_i2) + 4));
          #pragma ivdep
          for (long  _i2 = _ct19607; (_i2 <= _ct19606); _i2 = (_i2 + 2))
          {
            Col_1[(((_i0 * ((((((R / 2) - 16) + 2) - 15) + 1) * (((((C / 2) - 16) + 2) - 15) + 1))) + ((_i1 - 15) * (((((C / 2) - 16) + 2) - 15) + 1))) + (_i2 - 15))] = (Res_1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] + (((Col_1_x[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) - 1)] + (6 * Col_1_x[_i0][((-16 * _T_i1) + _i1)][(((-256 * _T_i2) + _i2) / 2)])) + Col_1_x[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) + 1)]) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19608 = ((1040 < ((16 * _T_i1) + 15))? 1040: ((16 * _T_i1) + 15));
        long  _ct19609 = ((15 > (16 * _T_i1))? 15: (16 * _T_i1));
        for (long  _i1 = _ct19609; (_i1 <= _ct19608); _i1 = (_i1 + 1))
        {
          long  _ct19610 = ((1039 < ((256 * _T_i2) + 257))? 1039: ((256 * _T_i2) + 257));
          long  _ct19611 = ((15 > ((256 * _T_i2) + 3))? 15: ((256 * _T_i2) + 3));
          #pragma ivdep
          for (long  _i2 = _ct19611; (_i2 <= _ct19610); _i2 = (_i2 + 2))
          {
            Col_1[(((_i0 * ((((((R / 2) - 16) + 2) - 15) + 1) * (((((C / 2) - 16) + 2) - 15) + 1))) + ((_i1 - 15) * (((((C / 2) - 16) + 2) - 15) + 1))) + (_i2 - 15))] = (Res_1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] + (((4 * Col_1_x[_i0][((-16 * _T_i1) + _i1)][((-1 + ((-256 * _T_i2) + _i2)) / 2)]) + (4 * Col_1_x[_i0][((-16 * _T_i1) + _i1)][((1 + ((-256 * _T_i2) + _i2)) / 2)])) * 0.125f));
          }
        }
      }
    }
  }
  #pragma omp parallel for schedule(static)
  for (long  _T_i1 = 1; (_T_i1 <= 129); _T_i1 = (_T_i1 + 1))
  {
    float  blend_x[3][16][131];
    float  Ux_0_img1[3][16][131];
    float  Ux_0_img2[3][16][131];
    float  Uy_0_img1[3][16][262];
    float  Uy_0_img2[3][16][262];
    float  Res_0[3][16][262];
    for (long  _T_i2 = 0; (_T_i2 <= 8); _T_i2 = (_T_i2 + 1))
    {
      if ((_T_i1 >= 2))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          for (long  _i1 = (16 * _T_i1); (_i1 <= ((16 * _T_i1) + 14)); _i1 = (_i1 + 2))
          {
            long  _ct19612 = ((1040 < ((128 * _T_i2) + 130))? 1040: ((128 * _T_i2) + 130));
            long  _ct19613 = ((15 > (128 * _T_i2))? 15: (128 * _T_i2));
            #pragma ivdep
            for (long  _i2 = _ct19613; (_i2 <= _ct19612); _i2 = (_i2 + 1))
            {
              blend_x[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((Col_1[(((_i0 * ((((((R / 2) - 16) + 2) - 15) + 1) * (((((C / 2) - 16) + 2) - 15) + 1))) + ((((_i1 / 2) - 1) - 15) * (((((C / 2) - 16) + 2) - 15) + 1))) + (-15 + _i2))] + (6 * Col_1[(((_i0 * ((((((R / 2) - 16) + 2) - 15) + 1) * (((((C / 2) - 16) + 2) - 15) + 1))) + (((_i1 / 2) - 15) * (((((C / 2) - 16) + 2) - 15) + 1))) + (-15 + _i2))])) + Col_1[(((_i0 * ((((((R / 2) - 16) + 2) - 15) + 1) * (((((C / 2) - 16) + 2) - 15) + 1))) + ((((_i1 / 2) + 1) - 15) * (((((C / 2) - 16) + 2) - 15) + 1))) + (-15 + _i2))]) * 0.125f);
            }
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19614 = ((2077 < ((16 * _T_i1) + 15))? 2077: ((16 * _T_i1) + 15));
        long  _ct19615 = ((31 > ((16 * _T_i1) + 1))? 31: ((16 * _T_i1) + 1));
        for (long  _i1 = _ct19615; (_i1 <= _ct19614); _i1 = (_i1 + 2))
        {
          long  _ct19616 = ((1040 < ((128 * _T_i2) + 130))? 1040: ((128 * _T_i2) + 130));
          long  _ct19617 = ((15 > (128 * _T_i2))? 15: (128 * _T_i2));
          #pragma ivdep
          for (long  _i2 = _ct19617; (_i2 <= _ct19616); _i2 = (_i2 + 1))
          {
            blend_x[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((4 * Col_1[(((_i0 * ((((((R / 2) - 16) + 2) - 15) + 1) * (((((C / 2) - 16) + 2) - 15) + 1))) + ((((_i1 - 1) / 2) - 15) * (((((C / 2) - 16) + 2) - 15) + 1))) + (-15 + _i2))]) + (4 * Col_1[(((_i0 * ((((((R / 2) - 16) + 2) - 15) + 1) * (((((C / 2) - 16) + 2) - 15) + 1))) + ((((_i1 + 1) / 2) - 15) * (((((C / 2) - 16) + 2) - 15) + 1))) + (-15 + _i2))])) * 0.125f);
          }
        }
      }
      if ((_T_i1 >= 2))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          for (long  _i1 = (16 * _T_i1); (_i1 <= ((16 * _T_i1) + 14)); _i1 = (_i1 + 2))
          {
            long  _ct19618 = ((1040 < ((128 * _T_i2) + 130))? 1040: ((128 * _T_i2) + 130));
            long  _ct19619 = ((15 > (128 * _T_i2))? 15: (128 * _T_i2));
            #pragma ivdep
            for (long  _i2 = _ct19619; (_i2 <= _ct19618); _i2 = (_i2 + 1))
            {
              Ux_0_img1[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((((_i1 / 2) - 1) - 1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))] + (6 * Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + (((_i1 / 2) - 1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))])) + Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((((_i1 / 2) + 1) - 1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))]) * 0.125f);
            }
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19620 = ((2077 < ((16 * _T_i1) + 15))? 2077: ((16 * _T_i1) + 15));
        long  _ct19621 = ((31 > ((16 * _T_i1) + 1))? 31: ((16 * _T_i1) + 1));
        for (long  _i1 = _ct19621; (_i1 <= _ct19620); _i1 = (_i1 + 2))
        {
          long  _ct19622 = ((1040 < ((128 * _T_i2) + 130))? 1040: ((128 * _T_i2) + 130));
          long  _ct19623 = ((15 > (128 * _T_i2))? 15: (128 * _T_i2));
          #pragma ivdep
          for (long  _i2 = _ct19623; (_i2 <= _ct19622); _i2 = (_i2 + 1))
          {
            Ux_0_img1[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((4 * Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((((_i1 - 1) / 2) - 1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))]) + (4 * Dy_1_img1[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((((_i1 + 1) / 2) - 1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))])) * 0.125f);
          }
        }
      }
      if ((_T_i1 >= 2))
      {
        for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          for (long  _i1 = (16 * _T_i1); (_i1 <= ((16 * _T_i1) + 14)); _i1 = (_i1 + 2))
          {
            long  _ct19624 = ((1040 < ((128 * _T_i2) + 130))? 1040: ((128 * _T_i2) + 130));
            long  _ct19625 = ((15 > (128 * _T_i2))? 15: (128 * _T_i2));
            #pragma ivdep
            for (long  _i2 = _ct19625; (_i2 <= _ct19624); _i2 = (_i2 + 1))
            {
              Ux_0_img2[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((((_i1 / 2) - 1) - 1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))] + (6 * Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + (((_i1 / 2) - 1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))])) + Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((((_i1 / 2) + 1) - 1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))]) * 0.125f);
            }
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19626 = ((2077 < ((16 * _T_i1) + 15))? 2077: ((16 * _T_i1) + 15));
        long  _ct19627 = ((31 > ((16 * _T_i1) + 1))? 31: ((16 * _T_i1) + 1));
        for (long  _i1 = _ct19627; (_i1 <= _ct19626); _i1 = (_i1 + 2))
        {
          long  _ct19628 = ((1040 < ((128 * _T_i2) + 130))? 1040: ((128 * _T_i2) + 130));
          long  _ct19629 = ((15 > (128 * _T_i2))? 15: (128 * _T_i2));
          #pragma ivdep
          for (long  _i2 = _ct19629; (_i2 <= _ct19628); _i2 = (_i2 + 1))
          {
            Ux_0_img2[_i0][((-16 * _T_i1) + _i1)][((-128 * _T_i2) + _i2)] = (((4 * Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((((_i1 - 1) / 2) - 1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))]) + (4 * Dy_1_img2[(((_i0 * (((((R / 2) - 2) - 1) + 1) * ((((C / 2) - 2) - 1) + 1))) + ((((_i1 + 1) / 2) - 1) * ((((C / 2) - 2) - 1) + 1))) + (-1 + _i2))])) * 0.125f);
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19630 = ((2078 < ((16 * _T_i1) + 15))? 2078: ((16 * _T_i1) + 15));
        long  _ct19631 = ((31 > (16 * _T_i1))? 31: (16 * _T_i1));
        for (long  _i1 = _ct19631; (_i1 <= _ct19630); _i1 = (_i1 + 1))
        {
          long  _ct19632 = ((2078 < ((256 * _T_i2) + 260))? 2078: ((256 * _T_i2) + 260));
          long  _ct19633 = ((32 > ((256 * _T_i2) + 2))? 32: ((256 * _T_i2) + 2));
          #pragma ivdep
          for (long  _i2 = _ct19633; (_i2 <= _ct19632); _i2 = (_i2 + 2))
          {
            Uy_0_img1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (img1[(((_i0 * (R * C)) + (_i1 * C)) + _i2)] - (((Ux_0_img1[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) - 1)] + (6 * Ux_0_img1[_i0][((-16 * _T_i1) + _i1)][(((-256 * _T_i2) + _i2) / 2)])) + Ux_0_img1[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) + 1)]) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19634 = ((2078 < ((16 * _T_i1) + 15))? 2078: ((16 * _T_i1) + 15));
        long  _ct19635 = ((31 > (16 * _T_i1))? 31: (16 * _T_i1));
        for (long  _i1 = _ct19635; (_i1 <= _ct19634); _i1 = (_i1 + 1))
        {
          long  _ct19636 = ((2077 < ((256 * _T_i2) + 259))? 2077: ((256 * _T_i2) + 259));
          long  _ct19637 = ((31 > ((256 * _T_i2) + 1))? 31: ((256 * _T_i2) + 1));
          #pragma ivdep
          for (long  _i2 = _ct19637; (_i2 <= _ct19636); _i2 = (_i2 + 2))
          {
            Uy_0_img1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (img1[(((_i0 * (R * C)) + (_i1 * C)) + _i2)] - (((4 * Ux_0_img1[_i0][((-16 * _T_i1) + _i1)][((-1 + ((-256 * _T_i2) + _i2)) / 2)]) + (4 * Ux_0_img1[_i0][((-16 * _T_i1) + _i1)][((1 + ((-256 * _T_i2) + _i2)) / 2)])) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19638 = ((2078 < ((16 * _T_i1) + 15))? 2078: ((16 * _T_i1) + 15));
        long  _ct19639 = ((31 > (16 * _T_i1))? 31: (16 * _T_i1));
        for (long  _i1 = _ct19639; (_i1 <= _ct19638); _i1 = (_i1 + 1))
        {
          long  _ct19640 = ((2078 < ((256 * _T_i2) + 260))? 2078: ((256 * _T_i2) + 260));
          long  _ct19641 = ((32 > ((256 * _T_i2) + 2))? 32: ((256 * _T_i2) + 2));
          #pragma ivdep
          for (long  _i2 = _ct19641; (_i2 <= _ct19640); _i2 = (_i2 + 2))
          {
            Uy_0_img2[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (img2[(((_i0 * (R * C)) + (_i1 * C)) + _i2)] - (((Ux_0_img2[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) - 1)] + (6 * Ux_0_img2[_i0][((-16 * _T_i1) + _i1)][(((-256 * _T_i2) + _i2) / 2)])) + Ux_0_img2[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) + 1)]) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19642 = ((2078 < ((16 * _T_i1) + 15))? 2078: ((16 * _T_i1) + 15));
        long  _ct19643 = ((31 > (16 * _T_i1))? 31: (16 * _T_i1));
        for (long  _i1 = _ct19643; (_i1 <= _ct19642); _i1 = (_i1 + 1))
        {
          long  _ct19644 = ((2077 < ((256 * _T_i2) + 259))? 2077: ((256 * _T_i2) + 259));
          long  _ct19645 = ((31 > ((256 * _T_i2) + 1))? 31: ((256 * _T_i2) + 1));
          #pragma ivdep
          for (long  _i2 = _ct19645; (_i2 <= _ct19644); _i2 = (_i2 + 2))
          {
            Uy_0_img2[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = (img2[(((_i0 * (R * C)) + (_i1 * C)) + _i2)] - (((4 * Ux_0_img2[_i0][((-16 * _T_i1) + _i1)][((-1 + ((-256 * _T_i2) + _i2)) / 2)]) + (4 * Ux_0_img2[_i0][((-16 * _T_i1) + _i1)][((1 + ((-256 * _T_i2) + _i2)) / 2)])) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19646 = ((2078 < ((16 * _T_i1) + 15))? 2078: ((16 * _T_i1) + 15));
        long  _ct19647 = ((31 > (16 * _T_i1))? 31: (16 * _T_i1));
        for (long  _i1 = _ct19647; (_i1 <= _ct19646); _i1 = (_i1 + 1))
        {
          long  _ct19648 = ((2078 < ((256 * _T_i2) + 259))? 2078: ((256 * _T_i2) + 259));
          long  _ct19649 = ((31 > ((256 * _T_i2) + 2))? 31: ((256 * _T_i2) + 2));
          #pragma ivdep
          for (long  _i2 = _ct19649; (_i2 <= _ct19648); _i2 = (_i2 + 1))
          {
            Res_0[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] = ((Uy_0_img1[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] * mask[((_i1 * C) + _i2)]) + (Uy_0_img2[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] * (1 - mask[((_i1 * C) + _i2)])));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19650 = ((2078 < ((16 * _T_i1) + 15))? 2078: ((16 * _T_i1) + 15));
        long  _ct19651 = ((31 > (16 * _T_i1))? 31: (16 * _T_i1));
        for (long  _i1 = _ct19651; (_i1 <= _ct19650); _i1 = (_i1 + 1))
        {
          long  _ct19652 = ((2078 < ((256 * _T_i2) + 258))? 2078: ((256 * _T_i2) + 258));
          long  _ct19653 = ((32 > ((256 * _T_i2) + 4))? 32: ((256 * _T_i2) + 4));
          #pragma ivdep
          for (long  _i2 = _ct19653; (_i2 <= _ct19652); _i2 = (_i2 + 2))
          {
            blend[(((_i0 * ((-60 + R) * (-60 + C))) + ((_i1 - 31) * (-60 + C))) + (_i2 - 31))] = (Res_0[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] + (((blend_x[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) - 1)] + (6 * blend_x[_i0][((-16 * _T_i1) + _i1)][(((-256 * _T_i2) + _i2) / 2)])) + blend_x[_i0][((-16 * _T_i1) + _i1)][((((-256 * _T_i2) + _i2) / 2) + 1)]) * 0.125f));
          }
        }
      }
      for (long  _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        long  _ct19654 = ((2078 < ((16 * _T_i1) + 15))? 2078: ((16 * _T_i1) + 15));
        long  _ct19655 = ((31 > (16 * _T_i1))? 31: (16 * _T_i1));
        for (long  _i1 = _ct19655; (_i1 <= _ct19654); _i1 = (_i1 + 1))
        {
          long  _ct19656 = ((2077 < ((256 * _T_i2) + 257))? 2077: ((256 * _T_i2) + 257));
          long  _ct19657 = ((31 > ((256 * _T_i2) + 3))? 31: ((256 * _T_i2) + 3));
          #pragma ivdep
          for (long  _i2 = _ct19657; (_i2 <= _ct19656); _i2 = (_i2 + 2))
          {
            blend[(((_i0 * ((-60 + R) * (-60 + C))) + ((_i1 - 31) * (-60 + C))) + (_i2 - 31))] = (Res_0[_i0][((-16 * _T_i1) + _i1)][((-256 * _T_i2) + _i2)] + (((4 * blend_x[_i0][((-16 * _T_i1) + _i1)][((-1 + ((-256 * _T_i2) + _i2)) / 2)]) + (4 * blend_x[_i0][((-16 * _T_i1) + _i1)][((1 + ((-256 * _T_i2) + _i2)) / 2)])) * 0.125f));
          }
        }
      }
    }
  }
  free(Dy_1_img1);
  free(Dy_1_img2);
  free(Dy_1_mask);
  free(Dy_2_img1);
  free(Dy_2_img2);
  free(Col_2);
  free(Col_1);
}
